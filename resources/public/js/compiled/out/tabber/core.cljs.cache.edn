{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name tabber.core, :imports nil, :requires {chords tabber.chords, reagent reagent.core, tabber.chords tabber.chords, tabber.colorThemes tabber.colorThemes, song tabber.songViewer, tabber.chordChart tabber.chordChart, reagent.core reagent.core, color tabber.colorThemes, tabber.state tabber.state, tabber.songViewer tabber.songViewer, state tabber.state, modal tabber.modal, tabber.modal tabber.modal, chart tabber.chordChart, str clojure.string, clojure.string clojure.string}, :uses {atom reagent.core}, :defs {Chords {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/core.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([]))}, :name tabber.core/Chords, :variadic false, :file "/Users/Fed/Projects/Clojure/tabber/src/tabber/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/core.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([]))}, :name tabber.core/on-js-reload, :variadic false, :file "/Users/Fed/Projects/Clojure/tabber/src/tabber/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:currentPage :else :marginTop :style :div :textAlign}, :order [:div :style :marginTop :textAlign :currentPage :else]}, :doc nil}
{:rename-macros {}, :renames {}, :externs {document {getElementById {}}}, :use-macros {}, :excludes #{}, :name tabber.core, :imports nil, :requires {chords tabber.chords, reagent reagent.core, tabber.chords tabber.chords, tabber.colorThemes tabber.colorThemes, song tabber.songViewer, tabber.chordChart tabber.chordChart, reagent.core reagent.core, color tabber.colorThemes, tabber.state tabber.state, tabber.songViewer tabber.songViewer, state tabber.state, modal tabber.modal, tabber.modal tabber.modal, chart tabber.chordChart, str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {atom reagent.core}, :defs {Chords {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/src/tabber/core.cljs", :line 11, :column 7, :end-line 11, :end-column 13, :arglists (quote ([]))}, :name tabber.core/Chords, :variadic false, :file "/Users/fedreg/Projects/ClojureChord/src/tabber/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:currentPage :else :marginTop :style :div :id :textAlign}, :order [:div :style :id :marginTop :textAlign :currentPage :else]}, :doc nil}
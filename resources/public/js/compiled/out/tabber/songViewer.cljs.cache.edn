{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name tabber.songViewer, :imports nil, :requires {state tabber.state, tabber.state tabber.state, color tabber.colorThemes, tabber.colorThemes tabber.colorThemes, chart tabber.chordChart, tabber.chordChart tabber.chordChart, str clojure.string, clojure.string clojure.string}, :uses nil, :defs {Tempo {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 95, :column 7, :end-line 95, :end-column 12, :arglists (quote ([]))}, :name tabber.songViewer/Tempo, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoButtonStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 58, :column 7, :end-line 58, :end-column 23, :arglists (quote ([]))}, :name tabber.songViewer/TempoButtonStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongTitleStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 41, :column 7, :end-line 41, :end-column 21, :arglists (quote ([]))}, :name tabber.songViewer/SongTitleStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, StartButtonStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 47, :column 7, :end-line 47, :end-column 23, :arglists (quote ([]))}, :name tabber.songViewer/StartButtonStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, BeatCounterStyle {:name tabber.songViewer/BeatCounterStyle, :file "src/tabber/song-viewer.cljs", :line 13, :column 1, :end-line 13, :end-column 22, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 13, :column 6, :end-line 13, :end-column 22}}, SongTitle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 146, :column 7, :end-line 146, :end-column 16, :arglists (quote ([]))}, :name tabber.songViewer/SongTitle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, GetReadyStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([]))}, :name tabber.songViewer/GetReadyStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongChordFilter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 122, :column 7, :end-line 122, :end-column 22, :arglists (quote ([collection thisSong thisIndex]))}, :name tabber.songViewer/SongChordFilter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 22, :method-params ([collection thisSong thisIndex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([collection thisSong thisIndex]))}, FormatSong {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 81, :column 7, :end-line 81, :end-column 17, :arglists (quote ([songInfo]))}, :name tabber.songViewer/FormatSong, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 17, :method-params ([songInfo]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([songInfo]))}, OnDeckChordStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 26, :column 7, :end-line 26, :end-column 23, :arglists (quote ([upper]))}, :name tabber.songViewer/OnDeckChordStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([upper]))}, BeatCounter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 110, :column 7, :end-line 110, :end-column 18, :arglists (quote ([]))}, :name tabber.songViewer/BeatCounter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongPage {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 163, :column 7, :end-line 163, :end-column 15, :arglists (quote ([]))}, :name tabber.songViewer/SongPage, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, OnDeckChord {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 140, :column 7, :end-line 140, :end-column 18, :arglists (quote ([num upper]))}, :name tabber.songViewer/OnDeckChord, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([num upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num upper]))}, ChordPreviewListStyle {:name tabber.songViewer/ChordPreviewListStyle, :file "src/tabber/song-viewer.cljs", :line 32, :column 1, :end-line 32, :end-column 27, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 32, :column 6, :end-line 32, :end-column 27}}, CurrentChord {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 134, :column 7, :end-line 134, :end-column 19, :arglists (quote ([]))}, :name tabber.songViewer/CurrentChord, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ChordPreviewList {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 126, :column 7, :end-line 126, :end-column 23, :arglists (quote ([]))}, :name tabber.songViewer/ChordPreviewList, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoButton {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 154, :column 7, :end-line 154, :end-column 18, :arglists (quote ([operator]))}, :name tabber.songViewer/TempoButton, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([operator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([operator]))}, StartButton {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 150, :column 7, :end-line 150, :end-column 18, :arglists (quote ([]))}, :name tabber.songViewer/StartButton, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, StartBeatCounter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 100, :column 7, :end-line 100, :end-column 23, :arglists (quote ([]))}, :name tabber.songViewer/StartBeatCounter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoDisplayStyle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 65, :column 7, :end-line 65, :end-column 24, :arglists (quote ([]))}, :name tabber.songViewer/TempoDisplayStyle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoDisplay {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 157, :column 7, :end-line 157, :end-column 19, :arglists (quote ([]))}, :name tabber.songViewer/TempoDisplay, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, CurrentChordStyle {:name tabber.songViewer/CurrentChordStyle, :file "src/tabber/song-viewer.cljs", :line 20, :column 1, :end-line 20, :end-column 23, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 20, :column 6, :end-line 20, :end-column 23}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:beat :transform :f1 :color :index :bottom :button :top :overflow :t2 :width :background :marginTop :paddingLeft :on-click :style :div :justifyContent :padding :right :display :position :songTitle :fontSize :h1 :border :tempo :t1 :onClick :height :left :song :margin}, :order [:position :bottom :left :display :fontSize :transform :width :top :margin :color :t1 :right :height :padding :overflow :background :border :marginTop :t2 :justifyContent :songTitle :tempo :song :beat :index :div :style :paddingLeft :f1 :h1 :button :on-click :onClick]}, :doc nil}
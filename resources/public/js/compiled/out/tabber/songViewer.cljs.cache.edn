{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name tabber.songViewer, :imports nil, :requires {state tabber.state, tabber.state tabber.state, color tabber.colorThemes, tabber.colorThemes tabber.colorThemes, chart tabber.chordChart, tabber.chordChart tabber.chordChart}, :uses nil, :defs {Tempo {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([]))}, :name tabber.songViewer/Tempo, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongTitle {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([]))}, :name tabber.songViewer/SongTitle, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongChordFilter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 46, :column 7, :end-line 46, :end-column 22, :arglists (quote ([collection song index]))}, :name tabber.songViewer/SongChordFilter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 22, :method-params ([collection song index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 3, :fn-var true, :arglists (quote ([collection song index]))}, BeatCounter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 29, :column 7, :end-line 29, :end-column 18, :arglists (quote ([]))}, :name tabber.songViewer/BeatCounter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, SongPage {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 102, :column 7, :end-line 102, :end-column 15, :arglists (quote ([]))}, :name tabber.songViewer/SongPage, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, OnDeckChord {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 54, :column 7, :end-line 54, :end-column 18, :arglists (quote ([num upper]))}, :name tabber.songViewer/OnDeckChord, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([num upper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([num upper]))}, StartSong {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([]))}, :name tabber.songViewer/StartSong, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, CurrentChord {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([]))}, :name tabber.songViewer/CurrentChord, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoButton {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([operator]))}, :name tabber.songViewer/TempoButton, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([operator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([operator]))}, StartButton {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 69, :column 7, :end-line 69, :end-column 18, :arglists (quote ([]))}, :name tabber.songViewer/StartButton, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, StartBeatCounter {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 13, :column 7, :end-line 13, :end-column 23, :arglists (quote ([]))}, :name tabber.songViewer/StartBeatCounter, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, TempoDisplay {:protocol-inline nil, :meta {:file "/Users/Fed/Projects/Clojure/tabber/src/tabber/song-viewer.cljs", :line 88, :column 7, :end-line 88, :end-column 19, :arglists (quote ([]))}, :name tabber.songViewer/TempoDisplay, :variadic false, :file "src/tabber/song-viewer.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:beat :transform :f1 :color :index :bottom :button :top :t2 :width :background :marginTop :paddingLeft :on-click :style :div :justifyContent :right :display :position :fontSize :chords :h1 :border :tempo :t1 :onClick :height :left :song :margin}, :order [:tempo :song :beat :index :div :style :position :bottom :left :display :fontSize :paddingLeft :color :f1 :t2 :transform :width :margin :chords :top :right :h1 :t1 :button :on-click :background :border :height :onClick :marginTop :justifyContent]}, :doc nil}
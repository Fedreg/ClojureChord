{:rename-macros {}, :renames {}, :use-macros {emit-env-config devtools.prefs, emit-external-config devtools.prefs}, :excludes #{}, :name devtools.prefs, :imports nil, :requires {defaults devtools.defaults, devtools.defaults devtools.defaults}, :cljs.spec/speced-vars [], :uses nil, :defs {merge-prefs! {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([m]))}, :name devtools.prefs/merge-prefs!, :variadic false, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, *prefs* {:name devtools.prefs/*prefs*, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :line 26, :column 1, :end-line 26, :end-column 23, :dynamic true, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 26, :column 16, :end-line 26, :end-column 23, :dynamic true}, :tag any}, external-config {:name devtools.prefs/external-config, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :line 22, :column 1, :end-line 22, :end-column 21, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 22, :column 6, :end-line 22, :end-column 21}, :tag cljs.core/IMap}, get-prefs {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([]))}, :name devtools.prefs/get-prefs, :variadic false, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, initial-config {:name devtools.prefs/initial-config, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :line 24, :column 1, :end-line 24, :end-column 20, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 24, :column 6, :end-line 24, :end-column 20}, :tag any}, set-pref! {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([key val]))}, :name devtools.prefs/set-pref!, :variadic false, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 16, :method-params ([key val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key val]))}, default-config {:name devtools.prefs/default-config, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :line 21, :column 1, :end-line 21, :end-column 20, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 21, :column 6, :end-line 21, :end-column 20}, :tag cljs.core/IMap}, pref {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 31, :column 7, :end-line 31, :end-column 11, :arglists (quote ([key]))}, :name devtools.prefs/pref, :variadic false, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 11, :method-params ([key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key]))}, set-prefs! {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([new-prefs]))}, :name devtools.prefs/set-prefs!, :variadic false, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 17, :method-params ([new-prefs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-prefs]))}, update-pref! {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([key f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(key f args)], :arglists ([key f & args]), :arglists-meta (nil)}}, :name devtools.prefs/update-pref!, :variadic true, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(key f args)], :arglists ([key f & args]), :arglists-meta (nil)}, :method-params [(key f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists ([key f & args])}, env-config {:name devtools.prefs/env-config, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :line 23, :column 1, :end-line 23, :end-column 16, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 23, :column 6, :end-line 23, :end-column 16}, :tag cljs.core/IMap}, simple-merge {:protocol-inline nil, :meta {:file "/Users/fedreg/Projects/ClojureChord/resources/public/js/compiled/out/devtools/prefs.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([base-map & maps])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(base-map maps)], :arglists ([base-map & maps]), :arglists-meta (nil)}}, :name devtools.prefs/simple-merge, :variadic true, :file "resources/public/js/compiled/out/devtools/prefs.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(base-map maps)], :arglists ([base-map & maps]), :arglists-meta (nil)}, :method-params [(base-map maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([base-map & maps])}}, :cljs.spec/registry-ref [], :require-macros {devtools.prefs devtools.prefs, defaults devtools.defaults, devtools.defaults devtools.defaults}, :doc nil}